find key ((k, v) : t) =
  if key == k
    then v
    else find key t

eval s (Const b)       = b
eval s (Var x)         = find x s
eval s (Not p)         = if eval s p then False    else True
eval s (And p q)       = if eval s p then eval s q else False
eval s (Implies p q)   = if eval s p then eval s q else True

vars (Const b)         = []
vars (Var x)           = [x]
vars (Not p)           = vars p
vars (And p q)         = append (vars p) (vars q)
vars (Implies p q)     = append (vars p) (vars q)

bools n = if n == 0
            then [[]]
            else let m = n - 1
                 in  append (map (Cons False) (bools m))
                            (map (Cons True ) (bools m))

neq x y = x /= y

rmdups []         = []
rmdups (x : xs) = x : rmdups (filter (neq x) xs)

substs p = let vs = rmdups (vars p)
           in  map (zip vs) (bools (length vs))

isTaut p = and (map (flip eval p) (substs p))

flip f y x = f x y

length xs = lengthAcc 0 xs

lengthAcc acc [] = acc
lengthAcc acc (x : xs) = lengthAcc (acc + 1) xs

append []       ys = ys
append (x : xs) ys = x : append xs ys

map f []         = []
map f (x : xs) = f x : map f xs

and []       = True
and (b : bs) = if b then and bs else False

filter p []      = []
filter p (x : xs) =
  if p x
    then x : filter p xs
    else filter p xs

null []       = True
null (x : xs) = False

zip []       ys       = []
zip (x : xs) []       = []
zip (x : xs) (y : ys) = (x, y) : zip xs ys

foldr1 f (x : xs) =
  if null xs
    then x
    else f x (foldr1 f xs)

imp v = Implies (Var 'q') (Var v)

names = "abc"

testProp = Implies
             (foldr1 And (map imp names))
             (Implies (Var 'q') (foldr1 And (map Var names)))

main = if isTaut testProp then 1 else 0
