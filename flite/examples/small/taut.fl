data Exp a
  = And (Exp a) (Exp a)
  | Const Bool
  | Implies (Exp a) (Exp a)
  | Not (Exp a)
  | Var a

find x s = fromJust $ lookup x s

eval s (Const b)       = b
eval s (Var x)         = find x s
eval s (Not p)         = if eval s p then False    else True
eval s (And p q)       = if eval s p then eval s q else False
eval s (Implies p q)   = if eval s p then eval s q else True

vars (Const b)         = []
vars (Var x)           = [x]
vars (Not p)           = vars p
vars (And p q)         = (vars p) ++ (vars q)
vars (Implies p q)     = (vars p) ++ (vars q)

con x xs = x : xs

bools n = if n == 0
            then [[]]
            else let m = n - 1
                 in  (map (con False) (bools m)) ++
                     (map (con True ) (bools m))

neq x y = x /= y

rmdups []         = []
rmdups (x : xs) = x : rmdups (filter (neq x) xs)

substs p = let vs = rmdups (vars p)
           in  map (zip vs) (bools (length vs))

isTaut p = and (map (flip eval p) (substs p))

imp v = Implies (Var 'q') (Var v)

names = "abcdef"

testProp = Implies
             (foldr1 And (map imp names))
             (Implies (Var 'q') (foldr1 And (map Var names)))

main = if isTaut testProp then 1 else 0
